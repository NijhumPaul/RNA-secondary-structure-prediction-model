#percentage_of_parameters: Calculates the parameters (bp, kpbp, hp, kphp, rc, kprc)
#protein_list_input_file: Read a CSV file and extract column 'Accession'

library(rvest)
library(tidyverse)
#install.packages("logging")
library(logging)
#library(testthat)

'This function calculates the 6 parameters for each accession ID (bp, kpbp, hp, kphp, rc, kprc)
  bp-> Betasheet percentage
  kpbp-> known partial betasheet percentage
  hp-> helix percentage
  kphp-> known partial helix percentage
  rc-> random coil percentage
  kprc-> known partial random coil percentage
  Input is accession ID, i.e. P35579
  Output is a vector of 7 items (ID,bp, kpbp, hp, kphp, rc, kprc) of each accession ID'
percentage_of_parameters <- function(ID){
  
  tryCatch(
  {
  #Scrape the following webpage
  url_old="https://www.uniprot.org/uniprot/accession" 
  url_new=gsub("accession", ID, url_old)

  #Read the 'secondary structure' table
  sec_structure_table<- url_new %>%
    read_html() %>%
    html_nodes(xpath='//*[@id="secstructure_section"]') %>%
    html_table(fill=TRUE,header=TRUE)
    
  #Read the total length
  seq.length<- url_new %>%
    read_html() %>%
    html_nodes(xpath='//*[@id="secondarystructure"]/svg/text[2]')%>%
    html_text()

  #Percentage calculation
  keyfeature=gsub(".*>","",sec_structure_table[[1]][,1])
  all_features_length = sec_structure_table[[1]][,5]
  sum_of_all_features_length=sum(all_features_length)
  
  betaStrand = sum(all_features_length[which(keyfeature=="Beta strandi")])
  bp = (betaStrand/ sum_of_all_features_length)*100  
  kpbp = (betaStrand/ (as.integer(seq.length)))*100  
  
  helix = sum(all_features_length[which(keyfeature=="Helixi")]) 
  hp = (helix/ sum_of_all_features_length)*100    
  kphp = (helix/ (as.integer(seq.length)))*100    
  
  random_coil = sum(all_features_length[which(keyfeature=="Turni")])
  rc = (random_coil/ sum_of_all_features_length)*100
  kprc = (random_coil/ (as.integer(seq.length)))*100      
  
  return(c(bp, kpbp, hp, kphp, rc, kprc))
},
error=function(error_message) {
  message(error_message)
  #logError(error)
  logerror(error_message)
  return(NA)
},
warning = function(warning_message){
  message(warning_message)
  return(NA)
}
  )
}


'This function reads a CSV file and 
  extracts the column: Accession
  Input is the directory of a csv file
  Output is a list of accession IDs'

protein_list_input_file <- function(csv_dir){
  
  tryCatch(
  {
#import csv file
files = read.csv(file=csv_dir ,header=TRUE)
#Extract column 'Accession' as a vector
accession = files %>% pull(Accession) 
IDs = accession[1:10]
ID = as.list(strsplit(IDs, " "))
return(ID)
},
error=function(error_message) {
  message(error_message)
  logerror(error_message)
  return(NA)
},
warning = function(warning_message){
  message(warning_message)
  return(NA)
}
  )
}


#The input csv file directory

main_function <- function(csv_dir){
  
  ID = protein_list_input_file(csv_dir)
  data = lapply(ID, percentage_of_parameters)
  #returns dataframe of all parameters along with accession ID
  parameters_in_dataframe = data.frame(ID= sapply( ID, "[", 1), 
                                       bp =as.numeric( sapply( data, "[", 1) ), kpbp =as.numeric( sapply( data, "[", 2) ), 
                                       hp =as.numeric( sapply( data, "[", 3) ), kphp =as.numeric( sapply( data, "[", 4) ),
                                       rc =as.numeric( sapply( data, "[", 5) ), kprc =as.numeric( sapply( data, "[", 6) ))
  return (parameters_in_dataframe)

}

#csv_dir = "C:/Users/USER/OneDrive - North Dakota University System/project_NIH/HC1_BB1.csv"
main_function("C:/Users/USER/OneDrive - North Dakota University System/project_NIH/HC1_BB1.csv")
#main_function("hvbjfhvb")
#write.csv(parameters_in_dataframe,"C:/Users/USER/OneDrive - North Dakota University System/project_NIH/demo_data.csv", row.names = FALSE)
